'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var invariant = _interopDefault(require('fbjs/lib/invariant'));
var ethUtil = _interopDefault(require('ethereumjs-util'));
var ethjsAbi = _interopDefault(require('ethjs-abi'));
var buffer = _interopDefault(require('buffer'));
var ethereumjsTx = _interopDefault(require('ethereumjs-tx'));
var safeBuffer = _interopDefault(require('safe-buffer'));
var scryptAsync = _interopDefault(require('scrypt-async'));
var browserifyAes = _interopDefault(require('browserify-aes'));
var randombytes = _interopDefault(require('randombytes'));

const BN$1=ethUtil.BN;var toHex=function(a){let b;return b='string'==typeof a&&a.startsWith('0x')?a:'0x'+new BN(a).toString(16), b};

var add0x=function(a){return'string'!=typeof a||a.startsWith('0x')?a:'0x'+a};

class Contract{constructor(a,b,c){invariant(a,'abi is not defined'), invariant(c,'gethClient is not defined'), invariant(b,'address is not defined'), invariant(b.startsWith('0x'),'address should starts with 0x'), this.gethClient=c, this.address=b, this.abi={};for(let d of a.abi)this.abi[d.name]=d;}async call(a,b=[],c=void 0,d=void 0,e=void 0){const f=[{to:this.address,data:this.encode(a,b),from:c,gasLimit:d,gasPrice:e},'latest'],g=await this.gethClient.call('eth_call',f),h=Object.values(ethjsAbi.decodeMethod(this.abi[a],g));if(1===this.abi[a].outputs.length)return h[0];else{const b={};return this.abi[a].outputs.map((a,c)=>{b[a.name]=h[c]}), b}return 1===h.length?h[0]:h}encode(a,b=[]){return ethjsAbi.encodeMethod(this.abi[a],b)}}var Contract_1=Contract;

var contractName="SNMTToken";var abi$1=[{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_spender",type:"address"},{name:"_value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"balance",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"target",type:"address"},{name:"mintedAmount",type:"uint256"}],name:"mintToken",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"owner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[],name:"getTokens",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_spender",type:"address"}],name:"allowance",outputs:[{name:"remaining",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{inputs:[],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,name:"whom",type:"address"},{indexed:!1,name:"amount",type:"uint256"}],name:"GiveAway",type:"fallback",payable:!0,stateMutability:"payable"},{anonymous:!1,inputs:[{indexed:!1,name:"whom",type:"address"},{indexed:!1,name:"amount",type:"uint256"},{indexed:!1,name:"value",type:"uint256"}],name:"GiveAway",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"spender",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Transfer",type:"event"}];var snm = {contractName:contractName,abi:abi$1};

var snm$1 = Object.freeze({
	contractName: contractName,
	abi: abi$1,
	default: snm
});

var contractName$1="Gatekeeper";var abi$2=[{constant:!0,inputs:[{name:"",type:"address"}],name:"keepers",outputs:[{name:"dayLimit",type:"uint256"},{name:"lastDay",type:"uint256"},{name:"spentToday",type:"uint256"},{name:"frozen",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"owner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"bytes32"}],name:"paid",outputs:[{name:"commitTS",type:"uint256"},{name:"paid",type:"bool"},{name:"keeper",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"transactionAmount",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"commissionBalance",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"commission",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{inputs:[{name:"_token",type:"address"},{name:"_freezingTime",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"txNumber",type:"uint256"},{indexed:!0,name:"value",type:"uint256"}],name:"PayinTx",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"txNumber",type:"uint256"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"commitTimestamp",type:"uint256"}],name:"CommitTx",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"txNumber",type:"uint256"},{indexed:!0,name:"value",type:"uint256"}],name:"PayoutTx",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"block",type:"uint256"}],name:"Suicide",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"keeper",type:"address"},{indexed:!0,name:"dayLimit",type:"uint256"}],name:"LimitChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"keeper",type:"address"}],name:"KeeperFreezed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"keeper",type:"address"}],name:"KeeperUnfreezed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"commission",type:"uint256"}],name:"CommissionChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"previousOwner",type:"address"},{indexed:!0,name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{constant:!1,inputs:[{name:"_keeper",type:"address"},{name:"_limit",type:"uint256"}],name:"ChangeKeeperLimit",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_keeper",type:"address"}],name:"FreezeKeeper",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_keeper",type:"address"}],name:"UnfreezeKeeper",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_value",type:"uint256"}],name:"Payin",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_txNumber",type:"uint256"}],name:"Payout",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_freezingTime",type:"uint256"}],name:"SetFreezingTime",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"GetFreezingTime",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_commission",type:"uint256"}],name:"SetCommission",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"GetCommission",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[],name:"TransferCommission",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[],name:"kill",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"}];var gate = {contractName:contractName$1,abi:abi$2};

var gate$1 = Object.freeze({
	contractName: contractName$1,
	abi: abi$2,
	default: gate
});

var contractName$2="OracleUSD";var abi$3=[{constant:!0,inputs:[],name:"owner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{inputs:[],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"previousOwner",type:"address"},{indexed:!0,name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{constant:!1,inputs:[{name:"_price",type:"uint256"}],name:"setCurrentPrice",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"getCurrentPrice",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"}];var oracleUSD = {contractName:contractName$2,abi:abi$3};

var oracleUSD$1 = Object.freeze({
	contractName: contractName$2,
	abi: abi$3,
	default: oracleUSD
});

var contractName$3="Market";var abi$4=[{constant:!0,inputs:[{name:"",type:"uint256"}],name:"deals",outputs:[{name:"supplierID",type:"address"},{name:"consumerID",type:"address"},{name:"masterID",type:"address"},{name:"askID",type:"uint256"},{name:"bidID",type:"uint256"},{name:"duration",type:"uint256"},{name:"price",type:"uint256"},{name:"startTime",type:"uint256"},{name:"endTime",type:"uint256"},{name:"status",type:"uint8"},{name:"blockedBalance",type:"uint256"},{name:"totalPayout",type:"uint256"},{name:"lastBillTS",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[],name:"unpause",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"paused",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[],name:"pause",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"owner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"orders",outputs:[{name:"orderType",type:"uint8"},{name:"orderStatus",type:"uint8"},{name:"author",type:"address"},{name:"counterparty",type:"address"},{name:"duration",type:"uint256"},{name:"price",type:"uint256"},{name:"identityLevel",type:"uint8"},{name:"blacklist",type:"address"},{name:"tag",type:"bytes32"},{name:"frozenSum",type:"uint256"},{name:"dealID",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{inputs:[{name:"_token",type:"address"},{name:"_blacklist",type:"address"},{name:"_oracle",type:"address"},{name:"_profileRegistry",type:"address"},{name:"_benchmarksQuantity",type:"uint256"},{name:"_netflagsQuantity",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"orderID",type:"uint256"}],name:"OrderPlaced",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"orderID",type:"uint256"}],name:"OrderUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"dealID",type:"uint256"}],name:"DealOpened",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"dealID",type:"uint256"}],name:"DealUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"dealID",type:"uint256"},{indexed:!0,name:"paidAmount",type:"uint256"}],name:"Billed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"changeRequestID",type:"uint256"}],name:"DealChangeRequestSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"changeRequestID",type:"uint256"}],name:"DealChangeRequestUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"worker",type:"address"},{indexed:!0,name:"master",type:"address"}],name:"WorkerAnnounced",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"worker",type:"address"},{indexed:!0,name:"master",type:"address"}],name:"WorkerConfirmed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"worker",type:"address"},{indexed:!0,name:"master",type:"address"}],name:"WorkerRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"newNum",type:"uint256"}],name:"NumBenchmarksUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"newNum",type:"uint256"}],name:"NumNetflagsUpdated",type:"event"},{anonymous:!1,inputs:[],name:"Pause",type:"event"},{anonymous:!1,inputs:[],name:"Unpause",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"previousOwner",type:"address"},{indexed:!0,name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{constant:!1,inputs:[{name:"_orderType",type:"uint8"},{name:"_id_counterparty",type:"address"},{name:"_duration",type:"uint256"},{name:"_price",type:"uint256"},{name:"_netflags",type:"bool[]"},{name:"_identityLevel",type:"uint8"},{name:"_blacklist",type:"address"},{name:"_tag",type:"bytes32"},{name:"_benchmarks",type:"uint64[]"}],name:"PlaceOrder",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"orderID",type:"uint256"}],name:"CancelOrder",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"askID",type:"uint256"},{name:"buyoutDuration",type:"uint256"}],name:"QuickBuy",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_askID",type:"uint256"},{name:"_bidID",type:"uint256"}],name:"OpenDeal",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"dealID",type:"uint256"},{name:"blacklisted",type:"uint8"}],name:"CloseDeal",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"dealID",type:"uint256"}],name:"Bill",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"dealID",type:"uint256"},{name:"newPrice",type:"uint256"},{name:"newDuration",type:"uint256"}],name:"CreateChangeRequest",outputs:[{name:"changeRequestID",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"changeRequestID",type:"uint256"}],name:"CancelChangeRequest",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_master",type:"address"}],name:"RegisterWorker",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_worker",type:"address"}],name:"ConfirmWorker",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_worker",type:"address"},{name:"_master",type:"address"}],name:"RemoveWorker",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"orderID",type:"uint256"}],name:"GetOrderInfo",outputs:[{name:"orderType",type:"uint8"},{name:"author",type:"address"},{name:"counterparty",type:"address"},{name:"duration",type:"uint256"},{name:"price",type:"uint256"},{name:"netflags",type:"bool[]"},{name:"identityLevel",type:"uint8"},{name:"blacklist",type:"address"},{name:"tag",type:"bytes32"},{name:"benchmarks",type:"uint64[]"},{name:"frozenSum",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"orderID",type:"uint256"}],name:"GetOrderParams",outputs:[{name:"orderStatus",type:"uint8"},{name:"dealID",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"dealID",type:"uint256"}],name:"GetDealInfo",outputs:[{name:"benchmarks",type:"uint64[]"},{name:"supplierID",type:"address"},{name:"consumerID",type:"address"},{name:"masterID",type:"address"},{name:"askID",type:"uint256"},{name:"bidID",type:"uint256"},{name:"startTime",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"dealID",type:"uint256"}],name:"GetDealParams",outputs:[{name:"duration",type:"uint256"},{name:"price",type:"uint256"},{name:"endTime",type:"uint256"},{name:"status",type:"uint8"},{name:"blockedBalance",type:"uint256"},{name:"totalPayout",type:"uint256"},{name:"lastBillTS",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_worker",type:"address"}],name:"GetMaster",outputs:[{name:"master",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"changeRequestID",type:"uint256"}],name:"GetChangeRequestInfo",outputs:[{name:"dealID",type:"uint256"},{name:"requestType",type:"uint8"},{name:"price",type:"uint256"},{name:"duration",type:"uint256"},{name:"status",type:"uint8"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"GetDealsAmount",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"GetOrdersAmount",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"GetChangeRequestsAmount",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"GetBenchmarksQuantity",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"GetNetflagsQuantity",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_newPR",type:"address"}],name:"SetProfileRegistryAddress",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_newBL",type:"address"}],name:"SetBlacklistAddress",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_newOracle",type:"address"}],name:"SetOracleAddress",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_newQuantity",type:"uint256"}],name:"SetBenchmarksQuantity",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_newQuantity",type:"uint256"}],name:"SetNetflagsQuantity",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"}];var market = {contractName:contractName$3,abi:abi$4};

var market$1 = Object.freeze({
	contractName: contractName$3,
	abi: abi$4,
	default: market
});

var contractName$4="AddressHashMap";var abi$5=[{constant:!0,inputs:[],name:"owner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{inputs:[],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"previousOwner",type:"address"},{indexed:!0,name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_value",type:"address"}],name:"write",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"read",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"}];var addressRegistry = {contractName:contractName$4,abi:abi$5};

var addressRegistry$1 = Object.freeze({
	contractName: contractName$4,
	abi: abi$5,
	default: addressRegistry
});

var require$$0 = ( snm$1 && snm ) || snm$1;

var require$$1 = ( gate$1 && gate ) || gate$1;

var require$$2 = ( oracleUSD$1 && oracleUSD ) || oracleUSD$1;

var require$$3 = ( market$1 && market ) || market$1;

var require$$4 = ( addressRegistry$1 && addressRegistry ) || addressRegistry$1;

const contracts={token:require$$0,gate:require$$1,oracleUSD:require$$2,market:require$$3,faucet:require$$0,addressRegistry:require$$4};var initContract=function(a,b,c){return invariant(b,'gethClient is not defined'), invariant(a,'set current contract name'), invariant(c,'address is not defined'), invariant(c.startsWith('0x'),'address should starts with 0x'), new Contract(contracts[a],c,b)};

var _slicedToArray=function(){function a(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value), !(b&&c.length===b));d=!0);}catch(a){e=!0, f=a;}finally{try{!d&&h['return']&&h['return']();}finally{if(e)throw f}}return c}return function(b,c){if(Array.isArray(b))return b;if(Symbol.iterator in Object(b))return a(b,c);throw new TypeError('Invalid attempt to destructure non-iterable instance')}}();const BN=ethUtil.BN; const GAS_LIMIT_DEFAULT=2e5; const GAS_PRICE_MAX='100000000000'; const MAX_ALLOWANCE='440000000000000000000000000'; const ZERO_ADDRESS='0x'+Array(41).join('0');class Account{constructor({gethClient:a,address0x:b,sonmTokenAddress:c,limitGasPrice:d=GAS_PRICE_MAX,throwGasPriceError:e=!1}){invariant(a,'gethClient is not defined'), invariant(b,'address is not defined'), invariant(b.startsWith('0x'),'address should starts with 0x'), this.throwGasPriceError=e, this.limitGasPrice=new BN(d), this.gethClient=a, this.address=b, this.tokens={}, this.nonce=0, this.sonmTokenAddress=c, this.contracts={};}initContracts(a){for(let b in a)this.contracts[b]=initContract(b,this.gethClient,a[b]);}setPrivateKey(a){this.gethClient.setPrivateKey(a);}async getBalance(){const a=await this.gethClient.getBalance(this.getAddress());return a.toString()}getAddress(){return this.address}getGasLimit(){return GAS_LIMIT_DEFAULT}async getGasPrice(){let a=await this.gethClient.getGasPrice();if(new BN(a).gt(this.limitGasPrice)){if(this.throwGasPriceError)throw new Error('Too much gas price '+a);a=GAS_PRICE_MAX;}return a}async requestTestTokens(){const a=toHex((await this.getGasLimit())),b=toHex((await this.getGasPrice())),c=await this.callContractMethod('faucet','getTokens',[],a,b);return c.getReceipt()}async getTokenExchangeRate(){const a=toHex((await this.getGasLimit())),b=toHex((await this.getGasPrice()));return(await this.contracts.oracleUSD.call('getCurrentPrice',[],this.getAddress(),a,b)).toString()}async buyOrder(a=0,b=0){await this.setAllowanceForMarket();const c=await this.callContractMethod('market','QuickBuy',[a,b],4e6);return c.getReceipt()}async closeDeal(a=0,b=!1){const c=await this.callContractMethod('market','CloseDeal',[a,b?1:0],2e6);return c.getReceipt()}async createChangeRequest(a=0,b,c='0'){const d=await this.callContractMethod('market','CreateChangeRequest',[a,b,c],2e6);return d.getReceipt()}async cancelChangeRequest(a=0){const b=await this.callContractMethod('market','CancelChangeRequest',[a],2e6);return b.getReceipt()}async confirmWorker(a=''){const b=await this.callContractMethod('market','ConfirmWorker',[a],2e6);return b.getReceipt()}async createOrder({orderType:a,counterPartyId:c=ZERO_ADDRESS,duration:d=0,price:b,netflags:e=[],identityLevel:f=1,blacklist:g=ZERO_ADDRESS,tag:h='',benchmarks:i=[0,0,0,0,0,0,0,0,0,0,0,0]}){const j=await this.callContractMethod('market','PlaceOrder',[a,c,d,b,e,f,g,Buffer.from(h,'hex'),i],2e6);return j.getReceipt()}async setAllowanceForMarket(){await this.setAllowance(MAX_ALLOWANCE,this.contracts.market.address);}async getOrderParams(a=0){const b=toHex((await this.getGasLimit())),c=await this.contracts.market.call('GetOrderParams',[a],this.getAddress(),b);return Object.assign({},...Object.keys(c).map((a)=>({[a]:c[a].toString()})))}async send(a,b,c,d,e){const f=await this.generateTransaction(a,b,c,d,e);return this.gethClient.sendTransaction(f)}async callContractMethod(a,b,c,d,e){this.nonce||(this.nonce=await this.gethClient.getTransactionCount(this.getAddress())), d=toHex(d||(await this.getGasLimit())), e=toHex(e||(await this.getGasPrice()));const f={data:await this.contracts[a].encode(b,c),from:this.getAddress(),gasLimit:d,gasPrice:e,value:0,to:this.contracts[a].address,nonce:toHex(this.nonce)};return this.nonce++, this.gethClient.sendTransaction(f)}async getGasParams(a,b){return Promise.all([a===void 0?await this.getGasLimit():a,b===void 0?await this.getGasPrice():b])}async getGasParamsAsHex(a,b){var c=await this.getGasParams(a,b),d=_slicedToArray(c,2);const e=d[0],f=d[1];return[toHex(e),toHex(f)]}async generateTransaction(a,b,c,d,e){this.nonce||(this.nonce=await this.gethClient.getTransactionCount(this.getAddress()));const f=toHex(b);d=toHex(d||(await this.getGasLimit())), e=toHex(e||(await this.getGasPrice()));let g={};if('0x'===c)g={from:this.getAddress(),gasLimit:d,gasPrice:e,value:f,to:this.normalizeTarget(a),nonce:toHex(this.nonce)};else{const b=await this.contracts.token.encode('transfer',[this.normalizeTarget(a),f]);g={from:this.getAddress(),gasLimit:d,gasPrice:e,value:0,to:c,nonce:toHex(this.nonce),data:b};}return this.nonce++, g}async getRawTransaction(a,b,c,d,e){const f=await this.generateTransaction(a,b,c,d,e);return this.gethClient.getRawTransaction(f)}async sendTokens(a,b,c,d,e){return await this.send(a,b,c,d,e)}async sendEther(a,b,c,d){return await this.send(a,b,'0x',c,d)}async setAllowance(a,b,c,d){c=toHex(c||(await this.getGasLimit())), d=toHex(d||(await this.getGasPrice()));const e=await this.contracts.token.call('allowance',[this.getAddress(),b],this.getAddress(),c,d);if(e.lt(new BN(a))){const e=await this.approve(a,b,c,d);return'0x1'===e.status}return!0}async approveFast(a,b,c,d){var e=await this.getGasParamsAsHex(c,d),f=_slicedToArray(e,2);const g=f[0],h=f[1],i=toHex(a),j=await this.callContractMethod('token','approve',[b,i],g,h);return j.getReceipt()}async approve(a,b,c,d){var e=await this.getGasParamsAsHex(c,d),f=_slicedToArray(e,2);const g=f[0],h=f[1],i=toHex(a);let j=await this.callContractMethod('token','approve',[b,0],g,h);return await j.getReceipt(), j=await this.callContractMethod('token','approve',[b,i],g,h), j.getReceipt()}async migrateToken(a,b,c){const d=toHex(a);b=toHex(b||(await this.getGasLimit())), c=toHex(c||(await this.getGasPrice()));let e=await this.setAllowance(a,this.contracts.gate.address,b,c);return!!e&&this.callContractMethod('gate','Payin',[d],b,c)}async getKYCLink(a,b,c,d){let e=await this.approveFast(a,b,c,d);if('0x1'===e.status){const a=this.gethClient.signMessage(e.transactionHash);return`${this.getAddress()}/0x${a.r.toString('hex')}${a.s.toString('hex')}${a.v.toString(16)}/${e.transactionHash}`}return''}normalizeTarget(a){return a instanceof Account?a.address:add0x(a)}}var Account_1=Account;

var _slicedToArray$1=function(){function a(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value), !(b&&c.length===b));d=!0);}catch(a){e=!0, f=a;}finally{try{!d&&h['return']&&h['return']();}finally{if(e)throw f}}return c}return function(b,c){if(Array.isArray(b))return b;if(Symbol.iterator in Object(b))return a(b,c);throw new TypeError('Invalid attempt to destructure non-iterable instance')}}();var checkToken=async function(a,b){if(invariant(a,'address is not defined'), invariant(a.startsWith('0x'),'address should starts with 0x'), invariant(b,'gethClient is not defined'), '0x'!==(await b.getCode(a)))try{const e=initContract('token',b,a);var c=await Promise.all([e.call('name'),e.call('symbol'),e.call('decimals')]),d=_slicedToArray$1(c,3);const f=d[0],g=d[1],h=d[2];return{name:f,symbol:g,decimals:h.toNumber(),address:a,contract:e}}catch(a){throw console.log(a), new Error('not_erc20_token')}else throw new Error('not_smart_contract')};

class Token{constructor({gethClient:a}){invariant(a,'gethClient is not defined'), this.gethClient=a, this.data=null;}async init(a){return this.data=await isERC20(a,this.gethClient), this.data}async getBalance(a){const b=await this.data.contract.call('balanceOf',[add0x(a)]);return b.toString()}getAddress(){return this.data.address}getInfo(){return{address:this.data.address,symbol:this.data.symbol,name:this.data.name,decimals:this.data.decimals}}setData(a){this.data=a;}}var Token_1=Token;

const BN$2=ethUtil.BN;class TokenList{constructor({gethClient:a}){invariant(a,'gethClient is not defined'), this.gethClient=a, this.tokens={}, this.list=[{address:'0x',symbol:'Ether',name:'Ethereum',decimals:'18'}];}async initSonmToken(a){invariant(a,'sonmTokenAddress is not defined'), invariant(a.startsWith('0x'),'sonmTokenAddress should starts with 0x');const b={address:a,symbol:'SNM',name:'SONM',decimals:'18'};this.list.push(b), b.contract=initContract('token',this.gethClient,a);const c=new Token_1({gethClient:this.gethClient});c.setData(b), this.tokens[a]=c;}getList(){return this.list}getToken(a){return this.tokens[a]}async add(a){if('0x'!==a)if(this.tokens[a])return this.tokens[a];else{const b=new Token_1({gethClient:this.gethClient}),c=await b.init(a);if(c){this.tokens[c.address]=b;const a=b.getInfo();return this.list.push(a), a}return!1}}async remove(a){this.tokens[a]&&(delete this.tokens[a], this.list=this.list.filter((b)=>b.address!==a));}async getTokenInfo(a,b=null){const c=new Token_1({gethClient:this.gethClient});await c.init(a);const d=await c.init(a);if(b){Array.isArray(b)||(b=[b]), d.balance=new BN(0);const a=[];for(const d of b)a.push(c.getBalance(d));const e=await Promise.all(a);for(const a of e)d.balance=d.balance.add(new BN$2(a));d.balance=d.balance.toString(10);}try{return d}catch(a){throw a}}async getBalances(a){const b={};try{let c=[this.gethClient.getBalance(a)];for(const b in this.tokens)c.push(this.tokens[b].getBalance(a));const d=await Promise.all(c),e=Object.keys(this.tokens);for(const a in d)b[0===parseInt(a)?'0x':e[a-1]]=d[a].toString();}catch(a){console.log(a.stack);}return b}}var TokenList_1=TokenList;

const BN$3=ethUtil.BN;var fromHex=function(a){return'0x'===a.substr(0,2)&&(a=a.substr(2)), new BN(a,16).toString(10)};

var _slicedToArray$2=function(){function a(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value), !(b&&c.length===b));d=!0);}catch(a){e=!0, f=a;}finally{try{!d&&h['return']&&h['return']();}finally{if(e)throw f}}return c}return function(b,c){if(Array.isArray(b))return b;if(Symbol.iterator in Object(b))return a(b,c);throw new TypeError('Invalid attempt to destructure non-iterable instance')}}();const BN$4=ethUtil.BN; const MINUTE=60000; const MAX_TIMEOUT=1e3*MINUTE;class TxResult{constructor(a,b,c=null){if(this._geth=b, this._receipt=null, this._hash=null, this._promise=null, null!==c&&this.validateTxParams(c), this._txParams=c, a instanceof TxResult)this._copyCtr(a);else if(a instanceof Promise)this._promise=a.then((a)=>this._processPromiseResult(a));else if(TxResult.checkTxHash(a))this._hash=a;else throw new Error('Unknown transaction src')}_copyCtr(a){a._hash?this._hash=a._hash:this._promise=a._promise.then((a)=>this._processPromiseResult(a));}_processPromiseResult(a){TxResult.checkTxHash(a)?this._hash=a:a&&TxResult.checkTxReceipt(a.receipt)&&(this._receipt=a.receipt, this._hash=a.receipt.transactionHash);}static checkTxHash(a){return'string'==typeof a&&a.startsWith('0x')}static checkTxReceipt(a){return a instanceof Object&&'cumulativeGasUsed'in a}async getHash(){return await this._promise, this._hash}async getTransaction(){return null===this._txParams&&(this._txParams=await this._geth.getTransaction((await this.getHash())),this.validateTxParams(this._txParams)), this._txParams}validateTxParams(a){if(!('object'==typeof a&&'gasPrice'in a))throw new Error('incorrect txParams')}async getTxPrice(){const a=await this.getReceipt(),b=await this.getTransaction();return b.gasPrice?new BN$4(fromHex(b.gasPrice)).mul(new BN$4(fromHex(a.gasUsed))).toString():'0'}async getConfirmationsCount(){var a=await Promise.all([this.getReceipt(),this._geth.getBlockNumber()]),b=_slicedToArray$2(a,2);const c=b[0],d=b[1];return d>c.blockNumber?d-c.blockNumber:0}async getReceipt(){let a;if(await this._promise, !this._receipt){const a=await this.getHash(),b=new Promise((b,c)=>{const d=setTimeout(()=>c(`getReceipt timeout: ${MAX_TIMEOUT}`),MAX_TIMEOUT),e=async()=>{const c=await this._geth.getTransactionReceipt(a);c?(clearTimeout(d), b(c)):setTimeout(e,this._getPollingInterval());};e();});await b.then((a)=>this._receipt=a);}return a=this._receipt, a}_getPollingInterval(){const a=Date.now()-this.timestamp,b=a>MINUTE?MINUTE:1e3;return b}async getInfo(){return this._geth.method('getTransaction')((await this.getHash()))}}var TransactionResult=TxResult;

const Buffer$1=buffer.Buffer;var GethClient_1=class{constructor(a,b,c=!1,d=3e4){invariant(a,'url is not defined'), this.requestCounter=1, this.url=a, this.timeout=d, this.privateKey=null, this.chainId=b, this.privateChain=c, this.errors={"intrinsic gas too low":'sonmapi_gas_too_low',"insufficient funds for gas * price + value":'sonmapi_insufficient_funds',"Failed to fetch":'sonmapi_network_error'};}async call(a,b=[]){const c={method:a,jsonrpc:'2.0',params:b,id:this.requestCounter++};try{const a=await fetch(this.url,{timeout:this.timeout,method:'POST',body:JSON.stringify(c),headers:{"Content-Type":'application/json'}});if(a&&200===a.status){const b=await a.json();if(b.error)throw Error(b.error.message);else return b.result}else throw Error('sonmapi_node_fatal_error')}catch(a){console.error(a.message);const b=this.errors[a.message]?this.errors[a.message]:'sonmapi_unknown_error';throw Error(b)}}async getGasPrice(){return fromHex((await this.call('eth_gasPrice')))}async getBalance(a){const b=await this.call('eth_getBalance',[a,'latest']);return fromHex(b)}async getCode(a){return await this.call('eth_getCode',[a,'latest'])}async getTransaction(a){return await this.call('eth_getTransactionByHash',[a])}async getTransactionReceipt(a){return await this.call('eth_getTransactionReceipt',[a])}async getBlockNumber(){return await this.call('eth_blockNumber')}async getTransactionCount(a){return fromHex((await this.call('eth_getTransactionCount',[a,'latest'])))}async sendTransaction(a){this.privateChain&&(a.gasPrice=0);const b=await this.call('eth_sendRawTransaction',[this.getRawTransaction(a)]);return new TransactionResult(b,this,a)}getRawTransaction(a){const b=Buffer$1.from(this.privateKey,'hex'),c=new ethereumjsTx(a);return c.sign(b), '0x'+c.serialize().toString('hex')}signMessage(a){return ethUtil.ecsign(Buffer$1.from(a.substr(2),'hex'),Buffer$1.from(this.privateKey,'hex'))}async getNetVersion(){return await this.call('net_version')}setPrivateKey(a){this.privateKey=a;}};

const Buffer$2=safeBuffer.Buffer;var recoverPrivateKey=function(a,b){let c,d=a.crypto.kdfparams;if('scrypt'===a.crypto.kdf)scryptAsync(b,new Buffer$2(d.salt,'hex'),{N:d.n,r:d.r,p:d.p,dklen:d.dklen,encoding:'binary'},(a)=>{c=a;});else throw new Error('Unsupported key derivation scheme');const e=new Buffer$2(a.crypto.ciphertext,'hex'),f=ethUtil.sha3(Buffer$2.concat([Buffer$2.from(c.slice(16,32)),e])).toString('hex');if(f!==a.crypto.mac)throw new Error('Key derivation failed - possibly wrong passphrase');const g=browserifyAes.createDecipheriv(a.crypto.cipher,c.slice(0,16),new Buffer$2(a.crypto.cipherparams.iv,'hex')),h=Buffer$2.concat([Buffer$2.from(g.update(e)),Buffer$2.from(g.final())]);return h.toString('hex')};

const Buffer$3=safeBuffer.Buffer;var newAccount=function(a='',b='',c={}){if(!a)throw new Error('Need password');if(!b)b=new Buffer$3(randombytes(32),'hex');else if(b.startsWith('0x')&&(b=b.substr(2)), b=new Buffer(b,'hex'), !ethUtil.isValidPrivate(b))throw new Error('PrivateKey not valid');const d=ethUtil.privateToPublic(b),e=ethUtil.publicToAddress(d).toString('hex'),f=randombytes(32),g=randombytes(16),h=c.cipher||'aes-128-ctr',i={dklen:c.dklen||32,salt:f.toString('hex')};i.n=c.n||262144, i.r=c.r||8, i.p=c.p||1;let j;scryptAsync(a,new Buffer$3(i.salt,'hex'),{N:i.n,r:i.r,p:i.p,dklen:i.dklen,encoding:'binary'},(a)=>{j=a;});const k=browserifyAes.createCipheriv(h,j.slice(0,16),g);if(!k)throw new Error('Unsupported cipher');const l=Buffer$3.concat([k.update(b),k.final()]),m=ethUtil.sha3(Buffer$3.concat([Buffer$3.from(j.slice(16,32)),new Buffer$3(l,'hex')]));return{version:3,id:randombytes(16).toString('hex'),address:e,crypto:{ciphertext:l.toString('hex'),cipherparams:{iv:g.toString('hex')},cipher:h,kdf:'scrypt',kdfparams:i,mac:m.toString('hex')}}};

var config={livenet:{url:'https://mainnet.infura.io',contractAddress:{}},livenet_private:{url:'https://sidechain.livenet.sonm.com',contractAddress:{addressRegistry:'0xd1a6f3d1ae33b4b19565a6b283d7a05c5a0decb0'}},rinkeby:{url:'https://rinkeby.infura.io',contractAddress:{}},rinkeby_private:{url:'https://sidechain-dev.sonm.com',contractAddress:{addressRegistry:'0x79b084653ca2588ed3915159e368db58aef165ee'}},testrpc:{url:'https://proxy.test.sonm.com:8545',contractAddress:{}},testrpc_private:{url:'https://proxy.test.sonm.com:8546',contractAddress:{addressRegistry:'0xa78d434b49dd7267c88cbf5ed181598d8290006b'}}};

const KEYS={mainchain:{token:'masterchainSNMAddress',market:'marketAddress',gate:'gatekeeperMasterchainAddress',oracleUSD:'oracleUsdAddress',faucet:'testnetFau\u0441etAddress'},sidechain:{token:'sidechainSNMAddress',market:'marketAddress',gate:'gatekeeperSidechainAddress',oracleUSD:'oracleUsdAddress',faucet:'testnetFau\u0441etAddress'}};function createSonmFactory(a,b='live',c=!1,d={}){async function e(){if(1>=Object.keys(g.contractAddress).length){const a=initContract('addressRegistry',new GethClient_1(config[`${b}_private`].url,b,!0),config[`${b}_private`].contractAddress.addressRegistry),d=c?KEYS.sidechain:KEYS.mainchain;for(const b in d)g.contractAddress[b]=(await a.call('read',[Buffer.from(d[b])],'0x'+Array(41).join('0'),toHex(1e6))).toLowerCase();}}const f=b+(c?'_private':''),g=config[f],h=new GethClient_1(a,b,c);return{gethClient:h,createAccount:async function(a){await e();const b=add0x(a),c={gethClient:h,config:g,sonmTokenAddress:g.contractAddress.token,address0x:b};Object.assign(c,d);const f=new Account_1(c);return f.initContracts(g.contractAddress), f},createTxResult:function(a){return new TransactionResult(a,h)},setPrivateKey:function(a){h.setPrivateKey(a);},getSonmTokenAddress:function(){return g.contractAddress.token},createTokenList:async function(){await e();const a=new TokenList_1({gethClient:h});return await a.initSonmToken(g.contractAddress.token), a}}}var sonmApi={createSonmFactory,utils:{recoverPrivateKey,add0x,newAccount}};var sonmApi_1=sonmApi.createSonmFactory;var sonmApi_2=sonmApi.utils;

exports['default'] = sonmApi;
exports.createSonmFactory = sonmApi_1;
exports.utils = sonmApi_2;
